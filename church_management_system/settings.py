"""
Django settings for church_management_system project.
Generated by 'django-admin startproject' using Django 5.1.2.
"""

from pathlib import Path
import os

# --------------------------
# BASE DIRECTORY
# --------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# --------------------------
# SECURITY (Dev)
# --------------------------
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "dev-please-change-this-to-a-random-long-string")
DEBUG = os.environ.get("DJANGO_DEBUG", "true").lower() == "true"

# Allow env override, but keep your defaults
_env_hosts = os.environ.get("ALLOWED_HOSTS", "")
ALLOWED_HOSTS = (
    [h for h in _env_hosts.split(",") if h] 
    if _env_hosts 
    else ["localhost", "127.0.0.1", "1a8cf7a2d3b1.ngrok-free.app"]
)

_csrf_extra = os.environ.get("CSRF_TRUSTED_ORIGINS", "")
CSRF_TRUSTED_ORIGINS = (
    [o for o in _csrf_extra.split(",") if o]
    if _csrf_extra
    else ["https://1a8cf7a2d3b1.ngrok-free.app"]
)

# --------------------------
# INSTALLED APPS
# --------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "django.contrib.humanize",

    # Your local apps
    "accounts",
    "registration",
    "settings",      # your app named 'settings' (ok to keep)
    "members",
    "leaders",
    "news",
    "notifications",
    "finance",
    "sacraments",
    "properties",
    "sms",
    "churchmember",
    "secretary",
    "accountant",
    "analysis",
    "languages",
    "pastor",
    "evangelist",
    "ai",
]

# --------------------------
# MIDDLEWARE
# --------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",  # after SessionMiddleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "accounts.middleware.LastPathMiddleware",
]

# --------------------------
# URLS / WSGI
# --------------------------
ROOT_URLCONF = "church_management_system.urls"
WSGI_APPLICATION = "church_management_system.wsgi.application"

# --------------------------
# TEMPLATES
# --------------------------
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# --------------------------
# DATABASE (SQLite3)
# --------------------------
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}
# Example MySQL (commented) â€” swap when deploying:
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         "NAME": os.environ.get("MYSQL_DB", "church_management_system"),
#         "USER": os.environ.get("MYSQL_USER", ""),
#         "PASSWORD": os.environ.get("MYSQL_PASSWORD", ""),
#         "HOST": os.environ.get("MYSQL_HOST", "127.0.0.1"),
#         "PORT": os.environ.get("MYSQL_PORT", "3306"),
#         "OPTIONS": {"charset": "utf8mb4"},
#     }
# }

# --------------------------
# PASSWORD VALIDATION
# --------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# --------------------------
# INTERNATIONALIZATION
# --------------------------
LANGUAGE_CODE = "en"
TIME_ZONE = "Africa/Dar_es_Salaam"
USE_I18N = True
USE_TZ = True

# Optional: languages for i18n
LANGUAGES = [
    ("en", "English"),
    ("fr", "French"),
    ("sw", "Swahili"),
]
LOCALE_PATHS = [BASE_DIR / "locale"]

# --------------------------
# STATIC & MEDIA
# --------------------------
STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# --------------------------
# SESSION SETTINGS
# --------------------------
SESSION_COOKIE_SECURE = not DEBUG  # secure cookies in production
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 3600
SESSION_SAVE_EVERY_REQUEST = True

# --------------------------
# AUTH MODEL
# --------------------------
AUTH_USER_MODEL = "accounts.CustomUser"

# --------------------------
# INTEGRATIONS (env-friendly)
# --------------------------
# --- NextSMS (ACTIVE) ---
NEXTSMS_USERNAME = os.environ.get("NEXTSMS_USERNAME", "")
NEXTSMS_PASSWORD = os.environ.get("NEXTSMS_PASSWORD", "")
NEXTSMS_SENDER_ID = os.environ.get("NEXTSMS_SENDER_ID", "KIZITA SOFT")
NEXTSMS_BASE_URL = os.environ.get("NEXTSMS_BASE_URL", "https://messaging-service.co.tz")
NEXTSMS_VERIFY_SSL = os.environ.get("NEXTSMS_VERIFY_SSL", "true").lower() != "false"

# --- Beem (DEPRECATED here; kept for reference) ---
# BEEM_SENDER_NAME = os.environ.get("BEEM_SENDER_NAME", "KIZITA SOFT")
# BEEM_API_KEY = os.environ.get("BEEM_API_KEY", "")
# BEEM_SECRET_KEY = os.environ.get("BEEM_SECRET_KEY", "")
# BEEM_VERIFY_SSL = os.environ.get("BEEM_VERIFY_SSL", "true").lower() != "false"

# LibreTranslate (optional local instance)
LIBRETRANSLATE_URL = os.environ.get("LIBRETRANSLATE_URL", "http://localhost:5000/translate")
LIBRETRANSLATE_API_KEY = os.environ.get("LIBRETRANSLATE_API_KEY")

# AI keys (leave empty in dev)
QWEN_API_KEY = os.environ.get("QWEN_API_KEY", "")
DEEPSEEK_API_KEY = os.environ.get("DEEPSEEK_API_KEY", "")

# --------------------------
# DEFAULT PK TYPE
# --------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/accounts/login/"


# --------------------------
# LOGGING (console-friendly)
# --------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "%(levelname)s %(asctime)s %(name)s: %(message)s"},
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "simple"},
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG" if DEBUG else "INFO",
    },
    "loggers": {
        "django.server": {"handlers": ["console"], "level": "INFO", "propagate": False},
        "django.db.backends": {"handlers": ["console"], "level": "WARNING" if DEBUG else "ERROR", "propagate": False},
    },
}
